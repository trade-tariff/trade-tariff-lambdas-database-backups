frameworkVersion: "3"
service: database-backups

plugins:
  - serverless-vpc-discovery
  - serverless-plugin-utils

provider:
  name: aws
  region: eu-west-2
  stage: ${env:STAGE}
  timeout: 300

  ecr:
    images:
      database-backups:
        uri: "${ssm:/${sls:stage}/DATABASE_BACKUPS_ECR_URL}:latest"

  environment:
    ENVIRONMENT: ${sls:stage}
    POSTGRES_DATABASE: "TradeTariffPostgres${capitalize(${sls:stage})}"
    POSTGRES_HOST: ${env:POSTGRES_HOST}
    POSTGRES_PASSWORD: ${env:POSTGRES_PASSWORD}
    POSTGRES_USER: ${env:POSTGRES_USER}
    S3_BUCKET: "trade-tariff-database-backups-${aws:accountId}"

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - s3:DeleteObject
        - s3:GetObject
        - s3:ListBucket
        - s3:PutObject
      Resource:
        - "arn:aws:s3:::trade-tariff-database-backups-${aws:accountId}"
        - "arn:aws:s3:::trade-tariff-database-backups-${aws:accountId}/*"

    - Effect: "Allow"
      Action:
        - kms:Decrypt
        - kms:GenerateDataKey
      Resource:
        - "arn:aws:kms:${self:provider.region}:${aws:accountId}:key/*"

    - Effect: "Allow"
      Action:
        - ec2:CreateNetworkInterface
        - ec2:DescribeNetworkInterfaces
        - ec2:DeleteNetworkInterface
      Resource:
        - "*"

functions:
  backup:
    image: database-backups
    vpcDiscovery:
      vpcName: "trade-tariff-${sls:stage}-vpc"
      subnets:
        - tagKey: "Name"
          tagValues:
            - "*private*"
      securityGroups:
        - names:
            - "trade-tariff-be-rd-${sls:stage}"
    events:
      - schedule: cron(0 12 * * ? *) # Run every day at 1200 UTC
